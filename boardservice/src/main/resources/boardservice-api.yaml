---
  swagger: "2.0"
  info:
    version: "1.0.0"
    title: "Swagger Petstore"
    description: "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification"
    termsOfService: "http://swagger.io/terms/"
    contact:
      name: "Swagger API Team"
    license:
      name: "MIT"
  host: "localhost:8002"
  basePath: "/board"
  schemes:
    - "http"
  consumes:
    - "application/json"
  produces:
    - "application/json"
  paths:
    /board:
      get:
        summary: List all boards
        operationId: listBoards
        tags:
          - boards
        parameters:
          - name: limit
            in: query
            description: How many items to return at one time (max 100)
            required: false
            type: integer
            format: int32
        responses:
          "200":
            description: An paged array of boards
            headers:
              x-next:
                type: string
                description: A link to the next page of responses
            schema:
              type: array
              items:
                $ref: '#/definitions/BoardContainer'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ResponseError'
      post:
        summary: Create a board
        operationId: createBoard
        tags:
          - board
        parameters:
          - name: createBoardRequest
            in: body
            schema:
              $ref: '#/definitions/CreateBoardRequest'
        responses:
          "201":
            description: Null response
            schema:
              $ref: '#/definitions/BoardContainer'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ResponseError'
    /board/{boardId}:
      get:
        summary: Info for a specific board
        operationId: findBoardById
        tags:
          - board
        parameters:
          - name: boardId
            in: path
            required: true
            description: The id of the board to retrieve
            type: string
        responses:
          "200":
            description: Expected response to a valid request
            schema:
              $ref: '#/definitions/BoardContainer'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ResponseError'
      delete:
        summary: Delete a specific board
        operationId: deleteBoardById
        tags:
          - board
        parameters:
          - name: boardId
            in: path
            required: true
            description: The id of the board to delete
            type: string
        responses:
          "200":
            description: OK
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ResponseError'
    /board/{boardId}/highlight:
      post:
        summary: Info for a specific board
        operationId: highlightSquare
        tags:
          - board
        parameters:
          - name: boardId
            in: path
            required: true
            description: The id of the board to retrieve
            type: string
          - name: toHighlight
            in: body
            required: true
            description: A square for wich highlight moves
            schema:
              $ref: '#/definitions/Square'
        responses:
          "200":
            description: Expected response to a valid request
            schema:
              type: object
              $ref: '#/definitions/BeatenAndAllowedSquareMap'
          default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ResponseError'
  definitions:
    # Mapped
    BoardContainer:
      type: object
    Square:
      type: object
    # Defined here
    CreateBoardRequest:
      type: object
    ResponseError:
      type: object
    SquareList:
      properties:
        allowed:
          type: array
          items:
            $ref: '#/definitions/Square'
        beaten:
          type: array
          items:
            $ref: '#/definitions/Square'
    BeatenAndAllowedSquareMap:
      description: a (key, BeatenAndAllowedItem) map. `default` is an example key
      properties:
        default:
          $ref: '#/definitions/SquareList'
      additionalProperties:
        type: array
        items:
          $ref: '#/definitions/SquareList'
