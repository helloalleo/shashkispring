---
  swagger: "2.0"
  info:
    version: "1.0.0"
    title: "Swagger Petstore"
    description: "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification"
    termsOfService: "http://swagger.io/terms/"
    contact:
      name: "Swagger API Team"
    license:
      name: "MIT"
  host: "localhost:8002"
  basePath: "/v1"
  schemes:
    - "http"
  consumes:
    - "application/json"
  produces:
    - "application/json"
  paths:
    /board:
      post:
        summary: Create a board
        operationId: createBoard
        tags:
          - board
        parameters:
          - name: createBoardRequest
            in: body
            schema:
              $ref: '#/definitions/CreateBoardRequest'
        responses:
          "201":
            description: Null response
            schema:
              $ref: '#/definitions/BoardContainer'
          default:
            description: unexpected error
            schema:
              $ref: '#/components/schemas/Error'
    /board/{boardId}:
      get:
        summary: Gets a board by ID.
        response:
          '200':
            description: OK
#            content:
#              application/json:
            schema:
              $ref: '#/definitions/BoardContainer'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
#      get:
#        summary: Info for a specific board
#        operationId: findBoardById
#        tags:
#          - board
#        parameters:
#          - name: boardId
#            in: path
#            required: true
#            description: The id of the board to retrieve
#            type: string
#        responses:
#          "200":
#            description: Expected response to a valid request
#            schema:
#              $ref: '#/definitions/BoardContainer'
#          default:
#            description: unexpected error
#            schema:
#              $ref: '#/components/schemas/Error'
      delete:
        summary: Delete a specific board
        operationId: deleteBoardById
        tags:
          - board
        parameters:
          - name: boardId
            in: path
            required: true
            description: The id of the board to delete
            type: string
        responses:
          "200":
            description: OK
          default:
            description: unexpected error
            schema:
              $ref: '#/components/schemas/Error'
    /board/{boardId}/highlight:
      post:
        summary: Info for a specific board
        operationId: highlightSquare
        tags:
          - board
        parameters:
          - name: boardId
            in: path
            required: true
            description: The id of the board to retrieve
            type: string
          - name: toHighlight
            in: body
            required: true
            description: A square for wich highlight moves
            schema:
              $ref: '#/definitions/Square'
        responses:
          "200":
            description: Expected response to a valid request
            schema:
              type: object
              $ref: '#/definitions/BeatenAndAllowedSquareMap'
          default:
            description: unexpected error
            schema:
              $ref: '#/components/schemas/Error'
    schemas:
      # Schema for error response body
      Error:
        type: object
        properties:
          code:
            type: string
          message:
            type: string
        required:
          - code
          - message

  definitions:
    # Mapped
    BoardContainer:
      type: object
    Square:
      type: object
    # Defined here
    CreateBoardRequest:
      type: object
    MovesList:
      properties:
        allowed:
          type: array
          items:
            $ref: '#/definitions/Square'
        beaten:
          type: array
          items:
            $ref: '#/definitions/Square'
    BeatenAndAllowedSquareMap:
      description: a (key, BeatenAndAllowedItem) map. `default` is an example key
      properties:
        default:
          $ref: '#/definitions/MovesList'
      additionalProperties:
        type: array
        items:
          $ref: '#/definitions/MovesList'

  components:
    responses:
      NotFound:
        description: The specified resource was not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Unauthorized:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    schemas:
      Error:
        type: object
        properties:
          code:
            type: integer
          message:
            type: string
