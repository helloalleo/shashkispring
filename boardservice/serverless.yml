# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: boardservice

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  timeout: 300
  memorySize: 1536

# you can overwrite defaults here
  stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    SPRING_PROFILES_ACTIVE: production

# you can add packaging information here
package:
  artifact: build/distributions/boardservice-1.0-SNAPSHOT.zip

functions:
  board:
    handler: com.workingbit.board.LambdaHandler::handleRequest

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: board
          method: get
      - http:
          path: board
          method: post
      - http:
          path: board
          method: put
      - http:
          path: board
          method: options
      - http:
          path: board/{id}
          method: get
          request:
            parameters:
              path:
                id: true
      - http:
          path: board/{id}
          method: options
          request:
            parameters:
              path:
                id: true
      - http:
          path: board/highlight
          method: post
      - http:
          path: board/highlight
          method: options

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation api templates here
resources:
  Resources:
    DynamoDbTableBoardBox:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BoardBox
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDbTableBoard:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Board
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicyBoardBox:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableBoardBox
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:*:*:table/BoardBox
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDBIamPolicyBoard:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableBoard
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:*:*:table/Board
        Roles:
          - Ref: IamRoleLambdaExecution

plugins:
  - serverless-dynamodb-local

custom:
  dynamodb:
    start:
      port: 8083
      inMemory: true
      migrate: true
#      seed: true
#      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true