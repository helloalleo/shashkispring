import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

group 'com.workingbit.core'
version '1.0-SNAPSHOT'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'propdeps'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.workingbit'
    version = '1.0'
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${spring_boot_version}"
            mavenBom "com.amazonaws:aws-java-sdk-bom:${amazonaws_version}"
        }
    }

    configurations {
        generatedCompile
    }

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-jersey'
        compile 'org.springframework.boot:spring-boot-devtools'

        compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
        compile 'com.amazonaws.serverless:aws-serverless-java-container-spring:0.5.1'
        compile 'com.amazonaws:aws-java-sdk-dynamodb'

        compile 'org.apache.commons:commons-lang3:3.5'
        compile 'org.apache.commons:commons-collections4:4.1'

        compile 'org.projectlombok:lombok:1.16.16'

        compile 'io.swagger:swagger-codegen:2.2.3'

        generatedCompile "org.springframework.boot:spring-boot-starter-data-rest"
        generatedCompile 'org.springframework.boot:spring-boot-starter-web'
        generatedCompile project(':sharedmodule')

        generatedCompile 'io.springfox:springfox-swagger2:2.5.0'
        generatedCompile 'io.springfox:springfox-swagger-ui:2.5.0'

        testCompile 'io.github.robwin:assertj-swagger:0.6.0'
        testCompile 'org.assertj:assertj-core:3.8.0'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
//    testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

def apiPackage = 'com.workingbit.api'

project(':sharedmodule') {
    bootRepackage.enabled = false
    findMainClass.enabled = false

    jar {
        baseName = 'sharedmdoule'
        version = "${sharemodule_version}"
    }
}

project(':boardservice') {
    apply plugin: 'application'

    bootRepackage {
        mainClass = 'com.workingbit.board.LocalBoardApplication'
    }

    springBoot {
        mainClass = 'com.workingbit.board.LocalBoardApplication'
        executable = true
        buildInfo()
    }

    bootRun {
        addResources = false
//        classpath += sourceSets.generated.output
    }

    task stage(dependsOn: 'bootRepackage') {
    }

    dependencies {
        compile project(':sharedmodule')
        compile project(':historymodule')
    }

    task copyRuntimeLibs(type: Copy) {
        into "$buildDir/libs/deps/lib"
        from configurations.runtime
    }

    task batchZip(type: Zip) {
        from sourceSets.main.output, "$buildDir/libs/deps"
    }

    def swaggerSourceFile = "src/main/resources/boardservice-api.yaml"
    def swaggerTargetFolder = 'src/generated/java'

    task generateApi {
        inputs.file("$projectDir/$swaggerSourceFile")
        outputs.dir("$projectDir/$swaggerTargetFolder")
        doLast {
            def config = new CodegenConfigurator()
            config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
            config.setOutputDir("$projectDir")
            config.setLang('spring')
            config.setAdditionalProperties([
                    'interfaceOnly' : 'true',
                    'apiPackage'    : apiPackage,
                    'importMappings': 'board_container=com.workingbit.share.domain.impl.BoardContainer',
//                    'modelPackage'  : 'com.dturan.model',
                    'sourceFolder'  : swaggerTargetFolder
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate()
        }
    }

    clean.doFirst {
        delete("${projectDir}/$swaggerTargetFolder")
    }

    sourceSets {
        generated {
            compileClasspath = configurations.generatedCompile
        }
        main {
            compileClasspath += generated.output
            runtimeClasspath += generated.output
        }
        test {
            compileClasspath += generated.output
            runtimeClasspath += generated.output
        }
    }

    compileGeneratedJava.dependsOn generateApi
    classes.dependsOn generatedClasses
    compileJava.dependsOn compileGeneratedJava
    ideaModule.dependsOn generateApi
}

project(':wikiservice') {
    apply plugin: 'application'

    bootRepackage {
        mainClass = 'com.workingbit.wiki.LocalWikiApplication'
    }

    springBoot {
        mainClass = 'com.workingbit.wiki.LocalWikiApplication'
        executable = true
        buildInfo()
    }

    bootRun {
        addResources = false
//        classpath += sourceSets.generated.output
    }

    dependencies {
        compile project(':sharedmodule')
    }

    bootRun {
        addResources = false
//        classpath += sourceSets.generated.output
    }

//    jar {
//        from sourceSets.generated.output
//    }

    task stage(dependsOn: 'bootRepackage') {
    }

    dependencies {
        compile project(':sharedmodule')
    }

    task copyRuntimeLibs(type: Copy) {
        into "$buildDir/libs/deps/lib"
        from configurations.runtime
    }

    task batchZip(type: Zip) {
        from sourceSets.main.output, "$buildDir/libs/deps"
    }
    def swaggerSourceFile = "src/main/resources/wikiservice-api.yaml"
    def swaggerTargetFolder = 'src/generated/java'

    task generateApi {
        inputs.file("$projectDir/$swaggerSourceFile")
        outputs.dir("$projectDir/$swaggerTargetFolder")
        doLast {
            def config = new CodegenConfigurator()
            config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
            config.setOutputDir("$projectDir")
            config.setLang('spring')
            config.setAdditionalProperties([
                    'interfaceOnly' : 'true',
                    'apiPackage'    : apiPackage,
//                    'modelPackage'  : 'com.dturan.model',
                    'sourceFolder'  : swaggerTargetFolder
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate()
        }
    }

    clean.doFirst {
        delete("${projectDir}/$swaggerTargetFolder")
    }

    sourceSets {
        generated {
            compileClasspath = configurations.generatedCompile
        }
        main {
            compileClasspath += generated.output
            runtimeClasspath += generated.output
        }
        test {
            compileClasspath += generated.output
            runtimeClasspath += generated.output
        }
    }

    compileGeneratedJava.dependsOn generateApi
    classes.dependsOn generatedClasses
    compileJava.dependsOn compileGeneratedJava
    ideaModule.dependsOn generateApi
}

sourceCompatibility=1.8
targetCompatibility=1.8

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"

        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"

        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"

        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"

        classpath 'io.swagger:swagger-codegen:2.2.3'
    }
}

defaultTasks 'bootRun'

repositories {
    mavenCentral()
}

clean {
    delete "target"
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

bootRepackage.enabled = false
//ideaModule.dependsOn generateApi

//classes.dependsOn generatedClasses
//compileJava.dependsOn compileGeneratedJava
